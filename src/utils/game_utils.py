from pathlib import Path
import logging, hashlib, subprocess, platform, shutil, os, time, atexit, importlib

import tomlkit
from tomlkit import document, nl, table, comment, parse
import patoolib

from utils.directories import get_work_directory, get_mod_directory
from utils.game_info import get_renpy_version, get_execution_directory, get_main_launch_script, parse_game_config

logging.basicConfig(format='%(asctime)s : %(message)s', level=logging.DEBUG)
log = logging.getLogger(__name__)

def install_mod(mod_path: Path, mod_name: str=None, force_install: bool=False) -> None:
	'''Installs the mod idk what you want from me'''
	if mod_name == None:
		mod_name = mod_path.stem

	forbidden_patterns = [
		'<', '>', ':', '"', '/', '\\', '|', '?', '*',
		'CON', 'PRN', 'AUX', 'NUL', 
		'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9',
		'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9'
	]

	# removes sinful patterns
	# is also made out of magic (chatgpt)
	mod_name = "".join([pattern for pattern in list(mod_name) if not pattern in forbidden_patterns])

	if Path(mod_path).exists():
		log.info(f'it is archive')
		mod_dir = get_work_directory('mods') / mod_name
		if mod_dir.exists() and force_install == False:
			log.error(f'mod already exists')
			return 1
		else:
			mod_dir.mkdir(exist_ok=True)
			patoolib.extract_archive(mod_path, outdir=mod_dir)
	else:
		log.info(f'it is not archive :(')


def setup_game(game_dir: Path) -> None:
	'''sets up various extra folders and files'''

	# removes lib/ folder for ren'py 7/8 compat
	if get_renpy_version(game_dir) == 78:
		exec_dir = get_execution_directory(game_dir)
		lib_dir = exec_dir / 'lib'
		if lib_dir.exists():
			shutil.rmtree(lib_dir)
	
	# makes a config file for said mod
	config_path = game_dir / 'game' / 'dossier.toml'
	# if not config_path.exists():
		# config_path.touch()
	with open(config_path, 'w') as f:
		config = tomlkit.document()
		config.add(tomlkit.comment(f'Config file for {game_dir.name}, generated by Dossier'))
		config.add(tomlkit.comment('Edit with caution...'))
		
		config.add(tomlkit.nl())

		options = tomlkit.table()
		options.add('nickname', '')
		options.add('category', '')
		options.add('different_save_dir', '')
		options.add('skip_splash_scr', '')
		options.add('skip_menu', '')
		options.add('discord_rpc', '')
		config.add('options', options)

		config.add(tomlkit.nl())

		info = tomlkit.table()
		info.add('creation_date', int(time.time()))
		info.add('last_played_date', 0)
		info.add('playtime', 0)
		config.add('info', info)
		
		f.write(tomlkit.dumps(config))

def cleanup_game(game_dir: Path) -> None:
	'''gets run when the mod closes'''
	config_path = game_dir / 'game' / 'dossier.toml'
	with open(config_path, 'r') as f:
		config_data = tomlkit.parse(f.read())
	config_data['info']['playtime'] += int(time.time()) - config_data['info']['last_played_date']
	config_data['info']['last_played_date'] = int(time.time())	
	with open(config_path, 'w') as f:
		f.write(tomlkit.dumps(config_data))

def launch_mod(mod_name: str) -> None:
	exec_dir = get_execution_directory(get_mod_directory(mod_name))
	exec_name = get_main_launch_script(get_mod_directory(mod_name)).stem
	exec_path = exec_dir / exec_name
	exec_path.chmod(exec_path.stat().st_mode | 0o111)
	log.info(f'exec: {exec_path}')
	
	config_path = get_mod_directory(mod_name) / 'game' / 'dossier.toml'
	config_data = parse_game_config(get_mod_directory(mod_name))

	launch_config = {
		'game_dir': get_mod_directory(mod_name),
		'exec_dir': exec_dir,
		'exec_path' : exec_path,
		'config_path': config_path,
		'config_data': config_data,
		'renpy_version': get_renpy_version(get_mod_directory(mod_name))
	}
	launch_game(launch_config)

def launch_base() -> None:
	launch_config = {
		'game_dir': get_work_directory('base'),
		'exec_dir': get_execution_directory(get_work_directory('base')),
		'exec_path': get_execution_directory(get_work_directory('base')) / get_main_launch_script(get_work_directory('base')).stem,
		'config_path': get_work_directory('base') / 'game' / 'dossier.toml',
		'config_data': parse_game_config(get_work_directory('base')),
		'renpy_version': 6
	}
	launch_game(launch_config)

def launch_game(launch_config: dict) -> None:
	'''runs the mod with the wanted parameters'''

	args = [str(launch_config['exec_path'])]
	env = os.environ.copy()
	if launch_config['renpy_version'] == 6:
		args.extend(['-EO', get_main_launch_script(launch_config['game_dir'])])
	if launch_config['config_data']['options']['different_save_dir']:
		save_dir = launch_config['game_dir'] / 'game' / 'saves'
		save_parameter = '--savedir'
		args.extend([save_parameter, str(save_dir)])
	if launch_config['config_data']['options']['skip_splash_scr']:
		env['RENPY_SKIP_SPLASHSCREEN'] = '1'
	if launch_config['config_data']['options']['skip_menu']:
		env['RENPY_SKIP_MAIN_MENU'] = '1'

	log.debug(f'args: {args}')
	log.debug(f'config_data: {launch_config['config_data']}')

	launch_config['config_data']['info']['last_played_date'] = int(time.time())
	with open(launch_config['config_path'], 'w') as f:
		f.write(tomlkit.dumps(launch_config['config_data']))

	atexit.register(lambda: cleanup_game(mod_name))

	subprocess.run(args, env=env, check=True)

